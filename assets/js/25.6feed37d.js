(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{378:function(v,_,t){"use strict";t.r(_);var r=t(43),a=Object(r.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"http"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[v._v("#")]),v._v(" HTTP")]),v._v(" "),t("h2",{attrs:{id:"概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[v._v("#")]),v._v(" 概念")]),v._v(" "),t("p",[v._v("HTTP是一个应用层协议，是一个请求/响应模型，由客户端发起请求，服务端返回响应。")]),v._v(" "),t("h3",{attrs:{id:"特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[v._v("#")]),v._v(" 特点")]),v._v(" "),t("ol",[t("li",[v._v("简单快速")]),v._v(" "),t("li",[v._v("基于请求和响应模型的协议")]),v._v(" "),t("li",[v._v("无连接")]),v._v(" "),t("li",[v._v("无状态")]),v._v(" "),t("li",[v._v("灵活")])]),v._v(" "),t("hr"),v._v(" "),t("h3",{attrs:{id:"报文"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#报文"}},[v._v("#")]),v._v(" 报文")]),v._v(" "),t("p",[v._v("由头部和正文构成。")]),v._v(" "),t("p",[v._v("请求报文：\n头部包含HTTP版本号、请求方法、请求URL、请求首部字段。\n空行\n正文")]),v._v(" "),t("p",[v._v("响应报文：\n头部包含HTTP版本号、状态码、状态码描述语、响应首部字段。\n正文")]),v._v(" "),t("hr"),v._v(" "),t("h3",{attrs:{id:"请求方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#请求方法"}},[v._v("#")]),v._v(" 请求方法")]),v._v(" "),t("p",[v._v("GET：获取URL指定资源。"),t("br"),v._v("\nPOST：传输实体信息。"),t("br"),v._v("\nOPTIONS：询问支持的请求方法。"),t("br"),v._v("\nHEAD：获取报文首部，与GET相比，不返回报文主体部分。"),t("br"),v._v("\nPUT：上传文件。"),t("br"),v._v("\nDELETE：删除文件。"),t("br"),v._v("\nTRACE：追踪请求的路径。"),t("br"),v._v("\nCONNECT：要求在与代理服务器通信时建立隧道，使用隧道进行TCP通信。主要使用SSL和TLS将数据加密后通过网络隧道进行传输。")]),v._v(" "),t("p",[t("strong",[v._v("GET、POST区别")])]),v._v(" "),t("ol",[t("li",[v._v("GET能被浏览器缓存，POST不能；")]),v._v(" "),t("li",[v._v("GET能添加到书签，POST不能；")]),v._v(" "),t("li",[v._v("GET的请求参数放在URL里，POST放在请求主体里；")]),v._v(" "),t("li",[v._v("GET能传输的数据量比POST小，一般限制在2KB左右；")]),v._v(" "),t("li",[v._v("GET请求只能支持URL编码，POST支持多种编码；")]),v._v(" "),t("li",[v._v("相对来说，GET请求更不安全，因为参数直接暴露在URL上。")])]),v._v(" "),t("p",[t("strong",[v._v("OPTIONS 在复杂请求的场景会触发，触发条件：")])]),v._v(" "),t("ol",[t("li",[v._v("请求方法不是GET、POST、HEAD这种简单请求")]),v._v(" "),t("li",[v._v("请求头部包含自定义字段")]),v._v(" "),t("li",[v._v("Conent-type不为 application/x-www-form-urlencode、multipart/form-data、text/plain（也就是设置为 application/json）")])]),v._v(" "),t("hr"),v._v(" "),t("h2",{attrs:{id:"http-状态码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-状态码"}},[v._v("#")]),v._v(" HTTP 状态码")]),v._v(" "),t("p",[v._v("100：已收到请求，正在处理"),t("br"),v._v("\n101: websocket 返回"),t("br"),v._v("\n200：请求成功"),t("br"),v._v("\n204: 没有响应体"),t("br"),v._v("\n206：成功返回部分数据（断点下载）"),t("br"),v._v("\n301：永久重定向"),t("br"),v._v("\n302：临时重定向"),t("br"),v._v("\n303：临时重定向，明确客户端应该使用GET"),t("br"),v._v("\n304：资源没有过期，协商缓存"),t("br"),v._v("\n307：临时重定向，POST不会变成GET"),t("br"),v._v("\n400：客户端报错"),t("br"),v._v("\n401：没有登录认证"),t("br"),v._v("\n403：没有权限访问"),t("br"),v._v("\n404：资源找不到"),t("br"),v._v("\n405: 服务器不支持此方法"),t("br"),v._v("\n500：服务器报错"),t("br"),v._v("\n503：服务器当前无法处理请求")]),v._v(" "),t("hr"),v._v(" "),t("h2",{attrs:{id:"http-版本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-版本"}},[v._v("#")]),v._v(" HTTP 版本")]),v._v(" "),t("h3",{attrs:{id:"http-1-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-1-0"}},[v._v("#")]),v._v(" HTTP 1.0")]),v._v(" "),t("p",[v._v("特性：")]),v._v(" "),t("ol",[t("li",[v._v("无状态：服务器不跟踪不记录请求过的状态。")]),v._v(" "),t("li",[v._v("无连接：浏览器每次请求都需要建立 TCP 连接。")])]),v._v(" "),t("ul",[t("li",[v._v("无法复用连接：每次都需要三次握手四次挥手，网络利用率低、浪费开销；")]),v._v(" "),t("li",[v._v("队头阻塞：HTTP 1.0 规定，前一个请求响应到达后下一个请求才能发送，如果前一个阻塞，后面的请求也会阻塞。")])]),v._v(" "),t("h3",{attrs:{id:"http-1-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1"}},[v._v("#")]),v._v(" HTTP 1.1")]),v._v(" "),t("p",[v._v("特性：")]),v._v(" "),t("ol",[t("li",[v._v("基于长连接：新增 Connection 字段，设置为 keep-alive 保持连接不断开。")])]),v._v(" "),t("ul",[t("li",[v._v("HTTP 1.1 默认保持长连接，数据传输完后继续保持 TCP 连接不断开。")])]),v._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[v._v("管道化：基于长连接的基础，管道化可以不用等前面的响应到达后再发送后面的请求，但响应的顺序还是按照请求的顺序返回。")]),v._v(" "),t("li",[v._v("缓存处理：新增缓存处理字段 cache-control、Etag。")]),v._v(" "),t("li",[v._v("断点传输：新增字段 Range，资源过大时，切分为多个部分，分别上传/下载。")])]),v._v(" "),t("h3",{attrs:{id:"http-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-2"}},[v._v("#")]),v._v(" HTTP 2")]),v._v(" "),t("p",[v._v("特性：")]),v._v(" "),t("ol",[t("li",[v._v("二进制分帧：")])]),v._v(" "),t("ul",[t("li",[v._v("HTTP 1.x 解析是基于文本， HTTP 2 将信息分割成更小的信息和帧，并采用二进制格式的编码，方便计算机解析，提高传输效率。")])]),v._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[v._v("多路复用：")])]),v._v(" "),t("ul",[t("li",[v._v("同一域名下的所有访问都是从一个 TCP 连接中走；")]),v._v(" "),t("li",[v._v("HTTP 消息被分解为独立的帧、乱序发送，服务端根据标志符（Stream ID）组装成请求、响应报文。")])]),v._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[v._v("头部压缩：")])]),v._v(" "),t("ul",[t("li",[v._v("压缩算法 HPACK：维护静态字典和动态字典，再采用哈夫曼编码，减少高频率出现字符的索引长度。")])]),v._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[v._v("服务器推送：")])]),v._v(" "),t("ul",[t("li",[v._v("服务器可以主动向客户端发送消息")])])])}),[],!1,null,null,null);_.default=a.exports}}]);