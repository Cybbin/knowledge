(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{389:function(e,v,t){"use strict";t.r(v);var _=t(43),a=Object(_.a)({},(function(){var e=this,v=e.$createElement,t=e._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"事件循环-event-loop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事件循环-event-loop"}},[e._v("#")]),e._v(" 事件循环 (Event Loop)")]),e._v(" "),t("h2",{attrs:{id:"进程、线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程、线程"}},[e._v("#")]),e._v(" 进程、线程")]),e._v(" "),t("ul",[t("li",[e._v("计算机在调度任务时，是以进程为单位的，也是分配任务的最小单位。")]),e._v(" "),t("li",[e._v("浏览器是一个多进程的（每一个标签页都是一个进程）")]),e._v(" "),t("li",[e._v("每个标签页里有一个渲染进程（浏览器内核）、网络进程、绘图绘制（GPU渲染进程）等")]),e._v(" "),t("li",[t("code",[e._v("Javascript")]),e._v(" 渲染进程（浏览器内核）中运行，该进程包括多个线程：\n"),t("ul",[t("li",[t("code",[e._v("ui")]),e._v("渲染线程；")]),e._v(" "),t("li",[t("code",[e._v("javascript")]),e._v("引擎，执行"),t("code",[e._v("js")]),e._v("（"),t("code",[e._v("ui")]),e._v("和"),t("code",[e._v("js")]),e._v("是互斥的，共用一个线程）；")]),e._v(" "),t("li",[e._v("事件线程（"),t("code",[e._v("click")]),e._v("、定时器、"),t("code",[e._v("ajax")]),e._v("等）")]),e._v(" "),t("li",[e._v("事件触发线程（"),t("code",[e._v("Event Loop")]),e._v("，单独的调度线程，处理事件、处理定时器、处理 "),t("code",[e._v("ajax")]),e._v(" 回调）")])])])]),e._v(" "),t("h2",{attrs:{id:"宏任务、微任务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#宏任务、微任务"}},[e._v("#")]),e._v(" 宏任务、微任务")]),e._v(" "),t("h3",{attrs:{id:"macro-task-宏任务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#macro-task-宏任务"}},[e._v("#")]),e._v(" "),t("code",[e._v("macro-task")]),e._v("(宏任务)")]),e._v(" "),t("ul",[t("li",[e._v("包括整体代码 script")]),e._v(" "),t("li",[e._v("setTimeout")]),e._v(" "),t("li",[e._v("setInterval")]),e._v(" "),t("li",[e._v("setImmediate（IE10+、Node.js）")]),e._v(" "),t("li",[e._v("requestAnimationFrame（浏览器独有）")]),e._v(" "),t("li",[e._v("I/O")]),e._v(" "),t("li",[e._v("UI rendering（浏览器独有）")])]),e._v(" "),t("h3",{attrs:{id:"micro-task-微任务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#micro-task-微任务"}},[e._v("#")]),e._v(" "),t("code",[e._v("micro-task")]),e._v("(微任务)")]),e._v(" "),t("ul",[t("li",[e._v("Promise")]),e._v(" "),t("li",[e._v("MutationObserver")]),e._v(" "),t("li",[e._v("process.nextTick（Node.js独有）")]),e._v(" "),t("li",[t("s",[e._v("Object.observe")]),e._v("（废弃）")])]),e._v(" "),t("h2",{attrs:{id:"event-loop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#event-loop"}},[e._v("#")]),e._v(" Event Loop")]),e._v(" "),t("p",[t("code",[e._v("Javascript")]),e._v(" 有一个主线程 "),t("code",[e._v("main thread")]),e._v(" 和调用栈（执行栈）"),t("code",[e._v("call-stack")]),e._v("，所有的任务都会放到调用栈等待主线程执行。")]),e._v(" "),t("h3",{attrs:{id:"调用栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#调用栈"}},[e._v("#")]),e._v(" 调用栈")]),e._v(" "),t("p",[e._v("采用先进后出、后进先出的规则，当函数执行时，会被添加到栈的顶部，当该函数执行完成后，就会从栈顶移出，直到栈内被清空。")]),e._v(" "),t("h3",{attrs:{id:"同步任务和异步任务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#同步任务和异步任务"}},[e._v("#")]),e._v(" 同步任务和异步任务")]),e._v(" "),t("p",[e._v("单线程任务被分为同步任务和异步任务，同步任务在调用栈按照顺序等待主线程以此执行，异步任务会在异步任务有了结果后，将注册的回调函数放入任务队列 "),t("code",[e._v("Task queue")]),e._v(" 中等待调用栈被清空的时候，读取到调用栈内执行。")]),e._v(" "),t("img",{attrs:{src:e.$withBase("/assets/event-loop/task.jpg")}}),e._v(" "),t("h2",{attrs:{id:"浏览器事件循环流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器事件循环流程"}},[e._v("#")]),e._v(" 浏览器事件循环流程")]),e._v(" "),t("ol",[t("li",[e._v("从任务队列取出一个"),t("strong",[e._v("宏任务")]),e._v("并执行；")]),e._v(" "),t("li",[e._v("执行并清空"),t("strong",[e._v("微任务")]),e._v("队列，如果微任务的执行中又加入了新的微任务，也会在这一步一起执行;")]),e._v(" "),t("li",[e._v("进入更新渲染阶段，判断是否需要渲染，不一定每一轮 "),t("code",[e._v("Event Loop")]),e._v(" 都会执行渲染，取决于屏幕刷新率、页面性能、页面是否在后台运行来共同决定。\n"),t("ul",[t("li",[e._v("浏览器会尽可能的保持帧率稳定，如页面性能 60fps （每16.6ms渲染一次）。")]),e._v(" "),t("li",[e._v("满足下面条件，会跳过渲染：\n"),t("ol",[t("li",[e._v("浏览器判定更新渲染不会带来视觉上的变化。")]),e._v(" "),t("li",[e._v("帧动画回调为空（通过 "),t("code",[e._v("requestAnimationFrame")]),e._v(" ）来请求帧动画。")])])])])]),e._v(" "),t("li",[e._v("如果第3步决定本轮 "),t("code",[e._v("Event Loop")]),e._v("需要渲染，继续往下运行，否则跳转第一步；")]),e._v(" "),t("li",[e._v("如果窗口大小发生了变化，执行监听的 "),t("code",[e._v("resize")]),e._v(" 方法；")]),e._v(" "),t("li",[e._v("如果页面发生了滚动，执行监听的 "),t("code",[e._v("scroll")]),e._v(" 方法；")]),e._v(" "),t("li",[e._v("执行帧动画回调，也就是 "),t("code",[e._v("requestAnimationFrame")]),e._v(" 的回调；")]),e._v(" "),t("li",[e._v("执行 "),t("code",[e._v("IntersectionObserver")]),e._v(" 的回调；")]),e._v(" "),t("li",[e._v("重新渲染绘制用户界面。")])]),e._v(" "),t("img",{attrs:{src:e.$withBase("/assets/event-loop/eventloop.jpg")}}),e._v(" "),t("h2",{attrs:{id:"node-js-事件循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node-js-事件循环"}},[e._v("#")]),e._v(" Node.js 事件循环")]),e._v(" "),t("blockquote",[t("p",[t("a",{attrs:{href:"https://nodejs.org/zh-cn/docs/guides/event-loop-timers-and-nexttick/",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方文档"),t("OutboundLink")],1)])]),e._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[e._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 此阶段执行已经放进队列的 setTimeout、setInterval 回调函数")]),e._v("\n   ┌───────────────────────────┐\n┌─"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("│           timers          │\n│  └─────────────┬─────────────┘   \n│ "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 执行延迟到下一个循环迭代的 I/O 回调")]),e._v("\n│  ┌─────────────┴─────────────┐\n│  │     pending callbacks     │\n│  └─────────────┬─────────────┘        \n│ "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 供系统内部使用")]),e._v("\n│  ┌─────────────┴─────────────┐\n│  │       idle"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" prepare       │\n│  └─────────────┬─────────────┘\n│                │             │               \n│ "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 轮询，检测新的I/O 事件，执行与I/O相关的回调，如 fs.readFile")]),e._v("\n│                │             │      ┌───────────────┐\n│  ┌─────────────┴─────────────┐      │   incoming"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("   │\n│  │           poll            │"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("─────┤  connections"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" │\n│  └─────────────┬─────────────┘      │   data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" etc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("  │\n│                │             │      └───────────────┘\n│ "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 执行 setImmediate 回调函数")]),e._v("\n│  ┌─────────────┴─────────────┐\n│  │           check           │\n│  └─────────────┬─────────────┘\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 执行关闭的回调函数 如 socket.on('close', ...)")]),e._v("\n│  ┌─────────────┴─────────────┐\n└──┤      close callbacks      │\n   └───────────────────────────┘\n")])])]),t("p",[e._v("三个重点阶段："),t("code",[e._v("timers")]),e._v("、"),t("code",[e._v("poll")]),e._v("、"),t("code",[e._v("check")])]),e._v(" "),t("h3",{attrs:{id:"timers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#timers"}},[e._v("#")]),e._v(" timers")]),e._v(" "),t("p",[e._v("timers 阶段会执行 "),t("code",[e._v("setTimeout")]),e._v(" 和 "),t("code",[e._v("setInterval")]),e._v(" 回调，由 "),t("code",[e._v("poll")]),e._v(" 阶段控制。定时器指定的事件不是准确事件，只能是尽快执行。")]),e._v(" "),t("h3",{attrs:{id:"poll"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#poll"}},[e._v("#")]),e._v(" poll")]),e._v(" "),t("p",[e._v("poll 阶段执行顺序：")]),e._v(" "),t("ol",[t("li",[e._v("如果存在定时器，且定时器时间到了，"),t("code",[e._v("event loop")]),e._v(" 回到 "),t("code",[e._v("timer")]),e._v(" 阶段；")]),e._v(" "),t("li",[e._v("如果没有定时器：")])]),e._v(" "),t("ul",[t("li",[e._v("如果 "),t("code",[e._v("poll")]),e._v(" 队列不为空，会遍历回调队列同步执行，知道队列为空或达到系统限制；")]),e._v(" "),t("li",[e._v("如果 "),t("code",[e._v("poll")]),e._v(" 队列为空：\n"),t("ul",[t("li",[e._v("如果有 "),t("code",[e._v("setImmediate")]),e._v(" 回调需要执行，"),t("code",[e._v("poll")]),e._v(" 阶段会进入 "),t("code",[e._v("check")]),e._v(" 阶段执行 "),t("code",[e._v("setImmediate")]),e._v(" 的回调；")]),e._v(" "),t("li",[e._v("如果没有 "),t("code",[e._v("setImmediate")]),e._v(" 回调需要执行，会等待回调被加入到当前队列中并执行，超出一定时间会自动进入 "),t("code",[e._v("check")]),e._v(" 阶段。")])])])]),e._v(" "),t("h3",{attrs:{id:"check"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#check"}},[e._v("#")]),e._v(" check")]),e._v(" "),t("p",[t("code",[e._v("check")]),e._v(" 阶段执行 "),t("code",[e._v("setImmediate")]),e._v(" 的回调。")]),e._v(" "),t("h3",{attrs:{id:"process-nexttick"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-nexttick"}},[e._v("#")]),e._v(" process.nextTick")]),e._v(" "),t("p",[t("code",[e._v("process.nextTick")]),e._v(" 有一个独立于 "),t("code",[e._v("evevt loop")]),e._v(" 的任务队列")]),e._v(" "),t("p",[e._v("在每一个 "),t("code",[e._v("event loop")]),e._v(" 阶段完成后会检查 "),t("code",[e._v("nextTick")]),e._v(" 队列，如果里面有任务，会清空该队列。")]),e._v(" "),t("h3",{attrs:{id:"node-版本差异"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node-版本差异"}},[e._v("#")]),e._v(" Node 版本差异")]),e._v(" "),t("p",[t("code",[e._v("Node 11")]),e._v(" 版本前后差异：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Node 11")]),e._v("之前：每执行一个阶段才回去清空微任务；")]),e._v(" "),t("li",[t("code",[e._v("Node 11")]),e._v("之后：每执行一个宏任务（"),t("code",[e._v("setTimeout、setInterval、serImmediate")]),e._v("）后就会清空微任务。")])]),e._v(" "),t("h2",{attrs:{id:"async-await-执行顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#async-await-执行顺序"}},[e._v("#")]),e._v(" async / await 执行顺序")]),e._v(" "),t("p",[t("code",[e._v("await")]),e._v(" 后面的函数执行完毕时，"),t("code",[e._v("await")]),e._v("会产生一个微任务（"),t("code",[e._v("Promise.then")]),e._v("）。注意这个微任务的产生时机：")]),e._v(" "),t("ul",[t("li",[e._v("执行完"),t("code",[e._v("await")]),e._v("后面函数之后，直接跳出 "),t("code",[e._v("async")]),e._v(" 函数，执行其他代码；")]),e._v(" "),t("li",[e._v("其他代码执行完后，再回到 "),t("code",[e._v("async")]),e._v(" 函数去执行剩下的代码，在此时产生微任务。")])]),e._v(" "),t("blockquote",[t("p",[t("a",{attrs:{href:"https://www.zhihu.com/question/268007969",target:"_blank",rel:"noopener noreferrer"}},[e._v("async/await 在chrome 环境和 node 环境的 执行结果不一致，求解？"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=a.exports}}]);